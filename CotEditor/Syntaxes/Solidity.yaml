extensions:
- keyString: "sol"

filenames: []

metadata:
  author: "Ronald Mannak"
  distributionURL: "https://coteditor.com"
  version: "0.5"
  license: "Same as CotEditor"
  lastModified: "2019-01-11"

completions: []

outlineMenu:
- beginString: "^([\\t ]*)(function)([^{]*)\\{"
  keyString: "$1$2 : $3"
  description: "function"
- beginString: "^([\\t ]*)(constructor)([^{]*)\\{"
  keyString: "$1$2$3"
  description: "constructor"
- beginString: "^([\\t ]*)contract +(\\w+)[\\t ]+(is[\\t ](.+?)(\\{|$))?"
  bold: true
  description: "contract"
  keyString: "Contract $1$2 inherits from $4"

keywords:
- beginString: "if"
- beginString: "else"
- beginString: "while"
- beginString: "do"
- beginString: "for"
- beginString: "break"
- beginString: "continue"
- beginString: "return"

commands:
- beginString: "\\bassert(?=\\()"
  regularExpression: true
- beginString: "\\brequire(?=\\()"
  regularExpression: true
- beginString: "\\brevert(?=\\()"
  regularExpression: true
- beginString: "\\bthrow(?=\\()"
  regularExpression: true
- beginString: "\\bcall(?=\\()"
  regularExpression: true
- beginString: "\\btransfer(?=\\()"
  regularExpression: true
- beginString: "\\bsend(?=\\()"
  regularExpression: true
- beginString: "\\bdelegatecall(?=\\()"
  regularExpression: true
- beginString: "\\bcallcode(?=\\()"
  regularExpression: true
- beginString: "\\bbalance(?=\\()"
  regularExpression: true
- beginString: "delete"

- beginString: "\\bthis(?=\\()"
  regularExpression: true
- beginString: "\\bselfdestruct(?=\\()"
  regularExpression: true
- beginString: "\\bsuicide(?=\\()"
  regularExpression: true

# block
- beginString: "(?<=block\\.)\\bblockhash(?=\\()"
  regularExpression: true
- beginString: "(?<=block\\.)\\bcoinbase(?=\\()"
  regularExpression: true
- beginString: "(?<=block\\.)\\bdifficulty(?=\\()"
  regularExpression: true
- beginString: "(?<=block\\.)\\bgaslimit(?=\\()"
  regularExpression: true
- beginString: "(?<=block\\.)\\bnumber(?=\\()"
  regularExpression: true
- beginString: "(?<=block\\.)\\btimestamp(?=\\()"
  regularExpression: true
- beginString: "(?<=block\\.)\\bnow(?=\\()"
  regularExpression: true

# msg
- beginString: "(?<=msg\\.)\\bdata(?=\\()"
  regularExpression: true
- beginString: "(?<=msg\\.)\\bgas(?=\\()"
  regularExpression: true
- beginString: "(?<=msg\\.)\\bsender(?=\\()"
  regularExpression: true
- beginString: "(?<=msg\\.)\\bsig(?=\\()"
  regularExpression: true
- beginString: "(?<=msg\\.)\\bvalue(?=\\()"
  regularExpression: true

# tx
- beginString: "(?<=tx\\.)\\bgasprice(?=\\()"
  regularExpression: true
- beginString: "(?<=tx\\.)\\borigin(?=\\()"
  regularExpression: true

# math
- beginString: "\\baddmod(?=\\()"
  regularExpression: true
- beginString: "\\bmulmod(?=\\()"
  regularExpression: true
- beginString: "\\bkeccak256(?=\\()"
  regularExpression: true
- beginString: "\\bsha256(?=\\()"
  regularExpression: true
- beginString: "\\bsha3(?=\\()"
  regularExpression: true
- beginString: "\\bripemd160(?=\\()"
  regularExpression: true
- beginString: "\\becrecover(?=\\()"
  regularExpression: true

# safemath
- beginString: "\\bmul(?=\\()"
  regularExpression: true
- beginString: "\\bdiv(?=\\()"
  regularExpression: true
- beginString: "\\bsub(?=\\()"
  regularExpression: true
- beginString: "\\badd(?=\\()"
  regularExpression: true
- beginString: "\\bmod(?=\\()"
  regularExpression: true

attributes:
- beginString: "public"
- beginString: "private"
- beginString: "internal"
- beginString: "external"
- beginString: "pure"
- beginString: "payable"
- beginString: "modifier"
- beginString: "function"
- beginString: "returns"
- beginString: "contract"
- beginString: "new"
- beginString: "is"
- beginString: "interface"
- beginString: "event"
- beginString: "emit"
- beginString: "\\busing\\b\\wfor\\b\\w" # this doesn't work yet
  regularExpression: true

types:
- beginString: "address"
- beginString: "bool"
- beginString: "string"
- beginString: "bytes"
- beginString: "bytes([1-9]|[12][0-9]|3[012])\\b"
  regularExpression: true
- beginString: "int"
- beginString: "int8"
- beginString: "int16"
- beginString: "int24"
- beginString: "int32"
- beginString: "int40"
- beginString: "int48"
- beginString: "int56"
- beginString: "int64"
- beginString: "int72"
- beginString: "int80"
- beginString: "int88"
- beginString: "int96"
- beginString: "int112"
- beginString: "int120"
- beginString: "int128"
- beginString: "int256"
- beginString: "uint"
- beginString: "uint8"
- beginString: "uint16"
- beginString: "uint32"
- beginString: "uint40"
- beginString: "uint48"
- beginString: "uint56"
- beginString: "uint64"
- beginString: "uint72"
- beginString: "uint80"
- beginString: "uint88"
- beginString: "uint96"
- beginString: "uint112"
- beginString: "uint120"
- beginString: "uint128"
- beginString: "uint256"
- beginString: "enum"
- beginString: "struct"
- beginString: "\\bmapping(?=\\()"
  regularExpression: true

variables:
- beginString: "this"
- beginString: "msg"
- beginString: "block"
- beginString: "tx"
- beginString: "abi"
- beginString: "0x[a-fA-F0-9]{40}$"
  ignoreCase: true
  regularExpression: true

values:
- beginString: "wei"
- beginString: "finney"
- beginString: "szabo"
- beginString: "ether"
- beginString: "seconds"
- beginString: "minutes"
- beginString: "hours"
- beginString: "days"
- beginString: "weeks"
- beginString: "years"
- beginString: "false"
- beginString: "true"

characters:
- beginString: "/\\S+/[gimy]*\\b"
  regularExpression: true

comments:
- beginString: "^#\\!/.*"
  regularExpression: true

commentDelimiters:
  endDelimiter: "*/"
  beginDelimiter: "/*"
  inlineDelimiter: "//"

strings:
- beginString: "\""
  endString: "\""
- beginString: "'"
  endString: "'"
- beginString: "`"
  endString: "`"

numbers:
- beginString: "\\b0b[01]+\\b"
  ignoreCase: true
  regularExpression: true
- beginString: "\\b0o[0-7]+\\b"
  ignoreCase: true
  regularExpression: true
- beginString: "\\b0x[0-9a-f]+\\b"
  ignoreCase: true
  regularExpression: true
- beginString: "\\b\\d+\\b"
  regularExpression: true
